{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"TextSummarization","provenance":[{"file_id":"1UFM7CcUfmAtIlvJWr_3kyXBFlUcq0Hga","timestamp":1588226975111}],"authorship_tag":"ABX9TyPwWlOUkgWE0ApbGnzViMAX"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"vpeqp70tdR41","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7Wa1Z505imM-","colab_type":"code","colab":{}},"source":["# Load Pkgs\n","import spacy"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"uJ0MQApSivYZ","colab_type":"code","colab":{}},"source":["# Text Preprocessing Pkg\n","from spacy.lang.en.stop_words import STOP_WORDS\n","from string import punctuation"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZQovp9Eej5mD","colab_type":"code","colab":{}},"source":["# Build a List of Stopwords\n","stopwords = list(STOP_WORDS)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"O-Lg7HjukDhQ","colab_type":"code","outputId":"c3e88d24-562f-4c83-88a5-86361c0fa383","executionInfo":{"status":"ok","timestamp":1588224751650,"user_tz":-330,"elapsed":7855,"user":{"displayName":"swathi sowmya Bavirthi","photoUrl":"","userId":"11874849727240434816"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["document1=str(input(\"Enter the text:-\"))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Enter the text:-An overwhelming amount of adaptive indexing algorithms exists today. In our recent studies [1], [2], we analyzed 8 papers including 18 different techniques on this type of indexing. The reason for the necessity of such a large number of methods is that adaptivity, while offering many nice properties, introduces a surprising amount of unpleasant problems [1], [2] as well. For instance, as the investigation of these works showed, adaptive indexing must deal with high variance, slow convergence speed, weak robustness against different query workloads and data distributions, and the trade-off between individual and accumulated query response time. In the simplest form of adaptive indexing, called database cracking or standard cracking [3], the index column is repartitioned adaptively with respect to the incoming query predicates. If a range query selecting [low, high) comes in, the partition into which low falls is split into two partitions where one partitions contains all keys less than low and the other partition all keys that are greater than or equal to low. The same reorganization is repeated for the partition into which high falls. After these two steps, the range query can be answered by a simple scan of the qualifying partitions. The information which key ranges each partition holds is stored in a separate index structure called cracker index. The more queries are answered this way, the more fine granular the partitioning becomes. By this, the query response time incrementally converges towards the one of a traditional index. Figure 1 visualizes the concept. ? Index Column < 13 >= 13 < 42 >= 42 Index Column Q0=[13,42) Index Column sorted Q1=[6,27) Q2 ... Qn < 6 >= 6 < 13 >= 13 < 27 >=27 < 42 >= 42 Index Column Fig. 1: Concept of database cracking reorganizing for multiple queries and converging towards a sorted state. If we inspect the literature [4], [5], [6], [7], [8], [9], [10] proposing variations of the described principle, we see that these algorithms mostly focus on reducing a single issue at a time. For instance, hybrid cracking [5] tries to improve the convergence speed towards a full index. Stochastic cracking [4] instead focuses on improving the robustness on sequential query workloads. Thus, to equip a system with adaptive indexing, it actually has to be extended with numerous different implementations that must be switched depending on the needs of the user and the current workload. This raises the question of how different these algorithms really are. During the study of the literature we made two observations: First, at the heart of every cracking algorithm is simple data partitioning, splitting a given key range into a certain number of partitions. Second, the main difference between the algorithms lies in how they distribute their indexing effort along the query sequence. Some methods tend to reorganize mostly early on, while others balance the effort as much as possible across the queries. Based on these observations, we will present a generalized adaptive indexing algorithm that adapts itself to the characteris\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"exzA_6lxkpJX","colab_type":"code","colab":{}},"source":["nlp = spacy.load('en')\n","# Build an NLP Object\n","docx = nlp(document1)\n","# Tokenization of Text\n","mytokens = [token.text for token in docx]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WszVpnYJk3tF","colab_type":"code","colab":{}},"source":["# Build Word Frequency\n","# word.text is tokenization in spacy\n","word_frequencies = {}\n","for word in docx:\n","    if word.text not in stopwords:\n","            if word.text not in word_frequencies.keys():\n","                word_frequencies[word.text] = 1\n","            else:\n","                word_frequencies[word.text] += 1"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hgQmCwXolQEE","colab_type":"code","colab":{}},"source":["# Maximum Word Frequency\n","maximum_frequency = max(word_frequencies.values())"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8152YsHylSAf","colab_type":"code","outputId":"74cd72d3-79fd-4ba8-d329-6c50fdff5c58","executionInfo":{"status":"ok","timestamp":1588224949307,"user_tz":-330,"elapsed":1357,"user":{"displayName":"swathi sowmya Bavirthi","photoUrl":"","userId":"11874849727240434816"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["word_frequencies"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{')': 3,\n"," ',': 32,\n"," '-': 1,\n"," '.': 22,\n"," '...': 1,\n"," '1': 4,\n"," '10': 1,\n"," '13': 4,\n"," '18': 1,\n"," '2': 2,\n"," '27': 2,\n"," '3': 1,\n"," '4': 2,\n"," '42': 4,\n"," '5': 2,\n"," '6': 3,\n"," '7': 1,\n"," '8': 2,\n"," '9': 1,\n"," ':': 2,\n"," '<': 6,\n"," '=': 6,\n"," '>': 6,\n"," '?': 1,\n"," 'After': 1,\n"," 'An': 1,\n"," 'Based': 1,\n"," 'By': 1,\n"," 'Column': 4,\n"," 'Concept': 1,\n"," 'During': 1,\n"," 'Fig': 1,\n"," 'Figure': 1,\n"," 'First': 1,\n"," 'For': 2,\n"," 'If': 2,\n"," 'In': 2,\n"," 'Index': 4,\n"," 'Q0=[13,42': 1,\n"," 'Q1=[6,27': 1,\n"," 'Q2': 1,\n"," 'Qn': 1,\n"," 'Second': 1,\n"," 'Some': 1,\n"," 'Stochastic': 1,\n"," 'The': 4,\n"," 'This': 1,\n"," 'Thus': 1,\n"," '[': 15,\n"," ']': 14,\n"," 'accumulated': 1,\n"," 'actually': 1,\n"," 'adaptive': 5,\n"," 'adaptively': 1,\n"," 'adaptivity': 1,\n"," 'adapts': 1,\n"," 'algorithm': 2,\n"," 'algorithms': 4,\n"," 'analyzed': 1,\n"," 'answered': 2,\n"," 'balance': 1,\n"," 'called': 2,\n"," 'certain': 1,\n"," 'characteris': 1,\n"," 'column': 1,\n"," 'comes': 1,\n"," 'concept': 1,\n"," 'contains': 1,\n"," 'convergence': 2,\n"," 'converges': 1,\n"," 'converging': 1,\n"," 'cracker': 1,\n"," 'cracking': 6,\n"," 'current': 1,\n"," 'data': 2,\n"," 'database': 2,\n"," 'deal': 1,\n"," 'depending': 1,\n"," 'described': 1,\n"," 'difference': 1,\n"," 'different': 4,\n"," 'distribute': 1,\n"," 'distributions': 1,\n"," 'early': 1,\n"," 'effort': 2,\n"," 'equal': 1,\n"," 'equip': 1,\n"," 'exists': 1,\n"," 'extended': 1,\n"," 'falls': 2,\n"," 'fine': 1,\n"," 'focus': 1,\n"," 'focuses': 1,\n"," 'form': 1,\n"," 'generalized': 1,\n"," 'given': 1,\n"," 'granular': 1,\n"," 'greater': 1,\n"," 'heart': 1,\n"," 'high': 3,\n"," 'holds': 1,\n"," 'hybrid': 1,\n"," 'implementations': 1,\n"," 'improve': 1,\n"," 'improving': 1,\n"," 'including': 1,\n"," 'incoming': 1,\n"," 'incrementally': 1,\n"," 'index': 5,\n"," 'indexing': 7,\n"," 'individual': 1,\n"," 'information': 1,\n"," 'inspect': 1,\n"," 'instance': 2,\n"," 'instead': 1,\n"," 'introduces': 1,\n"," 'investigation': 1,\n"," 'issue': 1,\n"," 'key': 2,\n"," 'keys': 2,\n"," 'large': 1,\n"," 'lies': 1,\n"," 'literature': 2,\n"," 'low': 4,\n"," 'main': 1,\n"," 'methods': 2,\n"," 'multiple': 1,\n"," 'necessity': 1,\n"," 'needs': 1,\n"," 'nice': 1,\n"," 'number': 2,\n"," 'numerous': 1,\n"," 'observations': 2,\n"," 'offering': 1,\n"," 'overwhelming': 1,\n"," 'papers': 1,\n"," 'partition': 4,\n"," 'partitioning': 2,\n"," 'partitions': 4,\n"," 'possible': 1,\n"," 'predicates': 1,\n"," 'present': 1,\n"," 'principle': 1,\n"," 'problems': 1,\n"," 'properties': 1,\n"," 'proposing': 1,\n"," 'qualifying': 1,\n"," 'queries': 3,\n"," 'query': 8,\n"," 'question': 1,\n"," 'raises': 1,\n"," 'range': 3,\n"," 'ranges': 1,\n"," 'reason': 1,\n"," 'recent': 1,\n"," 'reducing': 1,\n"," 'reorganization': 1,\n"," 'reorganize': 1,\n"," 'reorganizing': 1,\n"," 'repartitioned': 1,\n"," 'repeated': 1,\n"," 'respect': 1,\n"," 'response': 2,\n"," 'robustness': 2,\n"," 'scan': 1,\n"," 'selecting': 1,\n"," 'separate': 1,\n"," 'sequence': 1,\n"," 'sequential': 1,\n"," 'showed': 1,\n"," 'simple': 2,\n"," 'simplest': 1,\n"," 'single': 1,\n"," 'slow': 1,\n"," 'sorted': 2,\n"," 'speed': 2,\n"," 'split': 1,\n"," 'splitting': 1,\n"," 'standard': 1,\n"," 'state': 1,\n"," 'steps': 1,\n"," 'stored': 1,\n"," 'structure': 1,\n"," 'studies': 1,\n"," 'study': 1,\n"," 'surprising': 1,\n"," 'switched': 1,\n"," 'system': 1,\n"," 'techniques': 1,\n"," 'tend': 1,\n"," 'time': 3,\n"," 'today': 1,\n"," 'trade': 1,\n"," 'traditional': 1,\n"," 'tries': 1,\n"," 'type': 1,\n"," 'unpleasant': 1,\n"," 'user': 1,\n"," 'variance': 1,\n"," 'variations': 1,\n"," 'visualizes': 1,\n"," 'way': 1,\n"," 'weak': 1,\n"," 'workload': 1,\n"," 'workloads': 2,\n"," 'works': 1}"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"9GMSwncllc6R","colab_type":"code","colab":{}},"source":["for word in word_frequencies.keys():  \n","        word_frequencies[word] = (word_frequencies[word]/maximum_frequency)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SZY747ePmDks","colab_type":"code","outputId":"b45c8816-b53f-4502-cef7-4ce1f5cdbe5a","executionInfo":{"status":"ok","timestamp":1588225147746,"user_tz":-330,"elapsed":1309,"user":{"displayName":"swathi sowmya Bavirthi","photoUrl":"","userId":"11874849727240434816"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# Frequency Table\n","word_frequencies"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{')': 0.09375,\n"," ',': 1.0,\n"," '-': 0.03125,\n"," '.': 0.6875,\n"," '...': 0.03125,\n"," '1': 0.125,\n"," '10': 0.03125,\n"," '13': 0.125,\n"," '18': 0.03125,\n"," '2': 0.0625,\n"," '27': 0.0625,\n"," '3': 0.03125,\n"," '4': 0.0625,\n"," '42': 0.125,\n"," '5': 0.0625,\n"," '6': 0.09375,\n"," '7': 0.03125,\n"," '8': 0.0625,\n"," '9': 0.03125,\n"," ':': 0.0625,\n"," '<': 0.1875,\n"," '=': 0.1875,\n"," '>': 0.1875,\n"," '?': 0.03125,\n"," 'After': 0.03125,\n"," 'An': 0.03125,\n"," 'Based': 0.03125,\n"," 'By': 0.03125,\n"," 'Column': 0.125,\n"," 'Concept': 0.03125,\n"," 'During': 0.03125,\n"," 'Fig': 0.03125,\n"," 'Figure': 0.03125,\n"," 'First': 0.03125,\n"," 'For': 0.0625,\n"," 'If': 0.0625,\n"," 'In': 0.0625,\n"," 'Index': 0.125,\n"," 'Q0=[13,42': 0.03125,\n"," 'Q1=[6,27': 0.03125,\n"," 'Q2': 0.03125,\n"," 'Qn': 0.03125,\n"," 'Second': 0.03125,\n"," 'Some': 0.03125,\n"," 'Stochastic': 0.03125,\n"," 'The': 0.125,\n"," 'This': 0.03125,\n"," 'Thus': 0.03125,\n"," '[': 0.46875,\n"," ']': 0.4375,\n"," 'accumulated': 0.03125,\n"," 'actually': 0.03125,\n"," 'adaptive': 0.15625,\n"," 'adaptively': 0.03125,\n"," 'adaptivity': 0.03125,\n"," 'adapts': 0.03125,\n"," 'algorithm': 0.0625,\n"," 'algorithms': 0.125,\n"," 'analyzed': 0.03125,\n"," 'answered': 0.0625,\n"," 'balance': 0.03125,\n"," 'called': 0.0625,\n"," 'certain': 0.03125,\n"," 'characteris': 0.03125,\n"," 'column': 0.03125,\n"," 'comes': 0.03125,\n"," 'concept': 0.03125,\n"," 'contains': 0.03125,\n"," 'convergence': 0.0625,\n"," 'converges': 0.03125,\n"," 'converging': 0.03125,\n"," 'cracker': 0.03125,\n"," 'cracking': 0.1875,\n"," 'current': 0.03125,\n"," 'data': 0.0625,\n"," 'database': 0.0625,\n"," 'deal': 0.03125,\n"," 'depending': 0.03125,\n"," 'described': 0.03125,\n"," 'difference': 0.03125,\n"," 'different': 0.125,\n"," 'distribute': 0.03125,\n"," 'distributions': 0.03125,\n"," 'early': 0.03125,\n"," 'effort': 0.0625,\n"," 'equal': 0.03125,\n"," 'equip': 0.03125,\n"," 'exists': 0.03125,\n"," 'extended': 0.03125,\n"," 'falls': 0.0625,\n"," 'fine': 0.03125,\n"," 'focus': 0.03125,\n"," 'focuses': 0.03125,\n"," 'form': 0.03125,\n"," 'generalized': 0.03125,\n"," 'given': 0.03125,\n"," 'granular': 0.03125,\n"," 'greater': 0.03125,\n"," 'heart': 0.03125,\n"," 'high': 0.09375,\n"," 'holds': 0.03125,\n"," 'hybrid': 0.03125,\n"," 'implementations': 0.03125,\n"," 'improve': 0.03125,\n"," 'improving': 0.03125,\n"," 'including': 0.03125,\n"," 'incoming': 0.03125,\n"," 'incrementally': 0.03125,\n"," 'index': 0.15625,\n"," 'indexing': 0.21875,\n"," 'individual': 0.03125,\n"," 'information': 0.03125,\n"," 'inspect': 0.03125,\n"," 'instance': 0.0625,\n"," 'instead': 0.03125,\n"," 'introduces': 0.03125,\n"," 'investigation': 0.03125,\n"," 'issue': 0.03125,\n"," 'key': 0.0625,\n"," 'keys': 0.0625,\n"," 'large': 0.03125,\n"," 'lies': 0.03125,\n"," 'literature': 0.0625,\n"," 'low': 0.125,\n"," 'main': 0.03125,\n"," 'methods': 0.0625,\n"," 'multiple': 0.03125,\n"," 'necessity': 0.03125,\n"," 'needs': 0.03125,\n"," 'nice': 0.03125,\n"," 'number': 0.0625,\n"," 'numerous': 0.03125,\n"," 'observations': 0.0625,\n"," 'offering': 0.03125,\n"," 'overwhelming': 0.03125,\n"," 'papers': 0.03125,\n"," 'partition': 0.125,\n"," 'partitioning': 0.0625,\n"," 'partitions': 0.125,\n"," 'possible': 0.03125,\n"," 'predicates': 0.03125,\n"," 'present': 0.03125,\n"," 'principle': 0.03125,\n"," 'problems': 0.03125,\n"," 'properties': 0.03125,\n"," 'proposing': 0.03125,\n"," 'qualifying': 0.03125,\n"," 'queries': 0.09375,\n"," 'query': 0.25,\n"," 'question': 0.03125,\n"," 'raises': 0.03125,\n"," 'range': 0.09375,\n"," 'ranges': 0.03125,\n"," 'reason': 0.03125,\n"," 'recent': 0.03125,\n"," 'reducing': 0.03125,\n"," 'reorganization': 0.03125,\n"," 'reorganize': 0.03125,\n"," 'reorganizing': 0.03125,\n"," 'repartitioned': 0.03125,\n"," 'repeated': 0.03125,\n"," 'respect': 0.03125,\n"," 'response': 0.0625,\n"," 'robustness': 0.0625,\n"," 'scan': 0.03125,\n"," 'selecting': 0.03125,\n"," 'separate': 0.03125,\n"," 'sequence': 0.03125,\n"," 'sequential': 0.03125,\n"," 'showed': 0.03125,\n"," 'simple': 0.0625,\n"," 'simplest': 0.03125,\n"," 'single': 0.03125,\n"," 'slow': 0.03125,\n"," 'sorted': 0.0625,\n"," 'speed': 0.0625,\n"," 'split': 0.03125,\n"," 'splitting': 0.03125,\n"," 'standard': 0.03125,\n"," 'state': 0.03125,\n"," 'steps': 0.03125,\n"," 'stored': 0.03125,\n"," 'structure': 0.03125,\n"," 'studies': 0.03125,\n"," 'study': 0.03125,\n"," 'surprising': 0.03125,\n"," 'switched': 0.03125,\n"," 'system': 0.03125,\n"," 'techniques': 0.03125,\n"," 'tend': 0.03125,\n"," 'time': 0.09375,\n"," 'today': 0.03125,\n"," 'trade': 0.03125,\n"," 'traditional': 0.03125,\n"," 'tries': 0.03125,\n"," 'type': 0.03125,\n"," 'unpleasant': 0.03125,\n"," 'user': 0.03125,\n"," 'variance': 0.03125,\n"," 'variations': 0.03125,\n"," 'visualizes': 0.03125,\n"," 'way': 0.03125,\n"," 'weak': 0.03125,\n"," 'workload': 0.03125,\n"," 'workloads': 0.0625,\n"," 'works': 0.03125}"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"w40kl51amMM9","colab_type":"code","colab":{}},"source":["# Sentence Tokens\n","sentence_list = [ sentence for sentence in docx.sents ]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2zYbM537mfJT","colab_type":"code","outputId":"84345825-4780-4968-b11c-f7bcb4db3c8e","executionInfo":{"status":"ok","timestamp":1588225352153,"user_tz":-330,"elapsed":1530,"user":{"displayName":"swathi sowmya Bavirthi","photoUrl":"","userId":"11874849727240434816"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# Example of Sentence Tokenization,Word Tokenization and Lowering All Text\n","for t in sentence_list:\n","    for w in t:\n","        print(w.text.lower())\n","[w.text.lower() for t in sentence_list for w in t ]"],"execution_count":0,"outputs":[{"output_type":"stream","text":["an\n","overwhelming\n","amount\n","of\n","adaptive\n","indexing\n","algorithms\n","exists\n","today\n",".\n","in\n","our\n","recent\n","studies\n","[\n","1\n","]\n",",\n","[\n","2\n","]\n",",\n","we\n","analyzed\n","8\n","papers\n","including\n","18\n","different\n","techniques\n","on\n","this\n","type\n","of\n","indexing\n",".\n","the\n","reason\n","for\n","the\n","necessity\n","of\n","such\n","a\n","large\n","number\n","of\n","methods\n","is\n","that\n","adaptivity\n",",\n","while\n","offering\n","many\n","nice\n","properties\n",",\n","introduces\n","a\n","surprising\n","amount\n","of\n","unpleasant\n","problems\n","[\n","1\n","]\n",",\n","[\n","2\n","]\n","as\n","well\n",".\n","for\n","instance\n",",\n","as\n","the\n","investigation\n","of\n","these\n","works\n","showed\n",",\n","adaptive\n","indexing\n","must\n","deal\n","with\n","high\n","variance\n",",\n","slow\n","convergence\n","speed\n",",\n","weak\n","robustness\n","against\n","different\n","query\n","workloads\n","and\n","data\n","distributions\n",",\n","and\n","the\n","trade\n","-\n","off\n","between\n","individual\n","and\n","accumulated\n","query\n","response\n","time\n",".\n","in\n","the\n","simplest\n","form\n","of\n","adaptive\n","indexing\n",",\n","called\n","database\n","cracking\n","or\n","standard\n","cracking\n","[\n","3\n","]\n",",\n","the\n","index\n","column\n","is\n","repartitioned\n","adaptively\n","with\n","respect\n","to\n","the\n","incoming\n","query\n","predicates\n",".\n","if\n","a\n","range\n","query\n","selecting\n","[\n","low\n",",\n","high\n",")\n","comes\n","in\n",",\n","the\n","partition\n","into\n","which\n","low\n","falls\n","is\n","split\n","into\n","two\n","partitions\n","where\n","one\n","partitions\n","contains\n","all\n","keys\n","less\n","than\n","low\n","and\n","the\n","other\n","partition\n","all\n","keys\n","that\n","are\n","greater\n","than\n","or\n","equal\n","to\n","low\n",".\n","the\n","same\n","reorganization\n","is\n","repeated\n","for\n","the\n","partition\n","into\n","which\n","high\n","falls\n",".\n","after\n","these\n","two\n","steps\n",",\n","the\n","range\n","query\n","can\n","be\n","answered\n","by\n","a\n","simple\n","scan\n","of\n","the\n","qualifying\n","partitions\n",".\n","the\n","information\n","which\n","key\n","ranges\n","each\n","partition\n","holds\n","is\n","stored\n","in\n","a\n","separate\n","index\n","structure\n","called\n","cracker\n","index\n",".\n","the\n","more\n","queries\n","are\n","answered\n","this\n","way\n",",\n","the\n","more\n","fine\n","granular\n","the\n","partitioning\n","becomes\n",".\n","by\n","this\n",",\n","the\n","query\n","response\n","time\n","incrementally\n","converges\n","towards\n","the\n","one\n","of\n","a\n","traditional\n","index\n",".\n","figure\n","1\n","visualizes\n","the\n","concept\n",".\n","?\n","index\n","column\n","<\n","13\n",">\n","=\n","13\n","<\n","42\n",">\n","=\n","42\n","index\n","column\n","q0=[13,42\n",")\n","index\n","column\n","sorted\n","q1=[6,27\n",")\n","q2\n","...\n","qn\n","<\n","6\n",">\n","=\n","6\n","<\n","13\n",">\n","=\n","13\n","<\n","27\n",">\n","=\n","27\n","<\n","42\n",">\n","=\n","42\n","index\n","column\n","fig\n",".\n","1\n",":\n","concept\n","of\n","database\n","cracking\n","reorganizing\n","for\n","multiple\n","queries\n","and\n","converging\n","towards\n","a\n","sorted\n","state\n",".\n","if\n","we\n","inspect\n","the\n","literature\n","[\n","4\n","]\n",",\n","[\n","5\n","]\n",",\n","[\n","6\n","]\n",",\n","[\n","7\n","]\n",",\n","[\n","8\n","]\n",",\n","[\n","9\n","]\n",",\n","[\n","10\n","]\n","proposing\n","variations\n","of\n","the\n","described\n","principle\n",",\n","we\n","see\n","that\n","these\n","algorithms\n","mostly\n","focus\n","on\n","reducing\n","a\n","single\n","issue\n","at\n","a\n","time\n",".\n","for\n","instance\n",",\n","hybrid\n","cracking\n","[\n","5\n","]\n","tries\n","to\n","improve\n","the\n","convergence\n","speed\n","towards\n","a\n","full\n","index\n",".\n","stochastic\n","cracking\n","[\n","4\n","]\n","instead\n","focuses\n","on\n","improving\n","the\n","robustness\n","on\n","sequential\n","query\n","workloads\n",".\n","thus\n",",\n","to\n","equip\n","a\n","system\n","with\n","adaptive\n","indexing\n",",\n","it\n","actually\n","has\n","to\n","be\n","extended\n","with\n","numerous\n","different\n","implementations\n","that\n","must\n","be\n","switched\n","depending\n","on\n","the\n","needs\n","of\n","the\n","user\n","and\n","the\n","current\n","workload\n",".\n","this\n","raises\n","the\n","question\n","of\n","how\n","different\n","these\n","algorithms\n","really\n","are\n",".\n","during\n","the\n","study\n","of\n","the\n","literature\n","we\n","made\n","two\n","observations\n",":\n","first\n",",\n","at\n","the\n","heart\n","of\n","every\n","cracking\n","algorithm\n","is\n","simple\n","data\n","partitioning\n",",\n","splitting\n","a\n","given\n","key\n","range\n","into\n","a\n","certain\n","number\n","of\n","partitions\n",".\n","second\n",",\n","the\n","main\n","difference\n","between\n","the\n","algorithms\n","lies\n","in\n","how\n","they\n","distribute\n","their\n","indexing\n","effort\n","along\n","the\n","query\n","sequence\n",".\n","some\n","methods\n","tend\n","to\n","reorganize\n","mostly\n","early\n","on\n",",\n","while\n","others\n","balance\n","the\n","effort\n","as\n","much\n","as\n","possible\n","across\n","the\n","queries\n",".\n","based\n","on\n","these\n","observations\n",",\n","we\n","will\n","present\n","a\n","generalized\n","adaptive\n","indexing\n","algorithm\n","that\n","adapts\n","itself\n","to\n","the\n","characteris\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["['an',\n"," 'overwhelming',\n"," 'amount',\n"," 'of',\n"," 'adaptive',\n"," 'indexing',\n"," 'algorithms',\n"," 'exists',\n"," 'today',\n"," '.',\n"," 'in',\n"," 'our',\n"," 'recent',\n"," 'studies',\n"," '[',\n"," '1',\n"," ']',\n"," ',',\n"," '[',\n"," '2',\n"," ']',\n"," ',',\n"," 'we',\n"," 'analyzed',\n"," '8',\n"," 'papers',\n"," 'including',\n"," '18',\n"," 'different',\n"," 'techniques',\n"," 'on',\n"," 'this',\n"," 'type',\n"," 'of',\n"," 'indexing',\n"," '.',\n"," 'the',\n"," 'reason',\n"," 'for',\n"," 'the',\n"," 'necessity',\n"," 'of',\n"," 'such',\n"," 'a',\n"," 'large',\n"," 'number',\n"," 'of',\n"," 'methods',\n"," 'is',\n"," 'that',\n"," 'adaptivity',\n"," ',',\n"," 'while',\n"," 'offering',\n"," 'many',\n"," 'nice',\n"," 'properties',\n"," ',',\n"," 'introduces',\n"," 'a',\n"," 'surprising',\n"," 'amount',\n"," 'of',\n"," 'unpleasant',\n"," 'problems',\n"," '[',\n"," '1',\n"," ']',\n"," ',',\n"," '[',\n"," '2',\n"," ']',\n"," 'as',\n"," 'well',\n"," '.',\n"," 'for',\n"," 'instance',\n"," ',',\n"," 'as',\n"," 'the',\n"," 'investigation',\n"," 'of',\n"," 'these',\n"," 'works',\n"," 'showed',\n"," ',',\n"," 'adaptive',\n"," 'indexing',\n"," 'must',\n"," 'deal',\n"," 'with',\n"," 'high',\n"," 'variance',\n"," ',',\n"," 'slow',\n"," 'convergence',\n"," 'speed',\n"," ',',\n"," 'weak',\n"," 'robustness',\n"," 'against',\n"," 'different',\n"," 'query',\n"," 'workloads',\n"," 'and',\n"," 'data',\n"," 'distributions',\n"," ',',\n"," 'and',\n"," 'the',\n"," 'trade',\n"," '-',\n"," 'off',\n"," 'between',\n"," 'individual',\n"," 'and',\n"," 'accumulated',\n"," 'query',\n"," 'response',\n"," 'time',\n"," '.',\n"," 'in',\n"," 'the',\n"," 'simplest',\n"," 'form',\n"," 'of',\n"," 'adaptive',\n"," 'indexing',\n"," ',',\n"," 'called',\n"," 'database',\n"," 'cracking',\n"," 'or',\n"," 'standard',\n"," 'cracking',\n"," '[',\n"," '3',\n"," ']',\n"," ',',\n"," 'the',\n"," 'index',\n"," 'column',\n"," 'is',\n"," 'repartitioned',\n"," 'adaptively',\n"," 'with',\n"," 'respect',\n"," 'to',\n"," 'the',\n"," 'incoming',\n"," 'query',\n"," 'predicates',\n"," '.',\n"," 'if',\n"," 'a',\n"," 'range',\n"," 'query',\n"," 'selecting',\n"," '[',\n"," 'low',\n"," ',',\n"," 'high',\n"," ')',\n"," 'comes',\n"," 'in',\n"," ',',\n"," 'the',\n"," 'partition',\n"," 'into',\n"," 'which',\n"," 'low',\n"," 'falls',\n"," 'is',\n"," 'split',\n"," 'into',\n"," 'two',\n"," 'partitions',\n"," 'where',\n"," 'one',\n"," 'partitions',\n"," 'contains',\n"," 'all',\n"," 'keys',\n"," 'less',\n"," 'than',\n"," 'low',\n"," 'and',\n"," 'the',\n"," 'other',\n"," 'partition',\n"," 'all',\n"," 'keys',\n"," 'that',\n"," 'are',\n"," 'greater',\n"," 'than',\n"," 'or',\n"," 'equal',\n"," 'to',\n"," 'low',\n"," '.',\n"," 'the',\n"," 'same',\n"," 'reorganization',\n"," 'is',\n"," 'repeated',\n"," 'for',\n"," 'the',\n"," 'partition',\n"," 'into',\n"," 'which',\n"," 'high',\n"," 'falls',\n"," '.',\n"," 'after',\n"," 'these',\n"," 'two',\n"," 'steps',\n"," ',',\n"," 'the',\n"," 'range',\n"," 'query',\n"," 'can',\n"," 'be',\n"," 'answered',\n"," 'by',\n"," 'a',\n"," 'simple',\n"," 'scan',\n"," 'of',\n"," 'the',\n"," 'qualifying',\n"," 'partitions',\n"," '.',\n"," 'the',\n"," 'information',\n"," 'which',\n"," 'key',\n"," 'ranges',\n"," 'each',\n"," 'partition',\n"," 'holds',\n"," 'is',\n"," 'stored',\n"," 'in',\n"," 'a',\n"," 'separate',\n"," 'index',\n"," 'structure',\n"," 'called',\n"," 'cracker',\n"," 'index',\n"," '.',\n"," 'the',\n"," 'more',\n"," 'queries',\n"," 'are',\n"," 'answered',\n"," 'this',\n"," 'way',\n"," ',',\n"," 'the',\n"," 'more',\n"," 'fine',\n"," 'granular',\n"," 'the',\n"," 'partitioning',\n"," 'becomes',\n"," '.',\n"," 'by',\n"," 'this',\n"," ',',\n"," 'the',\n"," 'query',\n"," 'response',\n"," 'time',\n"," 'incrementally',\n"," 'converges',\n"," 'towards',\n"," 'the',\n"," 'one',\n"," 'of',\n"," 'a',\n"," 'traditional',\n"," 'index',\n"," '.',\n"," 'figure',\n"," '1',\n"," 'visualizes',\n"," 'the',\n"," 'concept',\n"," '.',\n"," '?',\n"," 'index',\n"," 'column',\n"," '<',\n"," '13',\n"," '>',\n"," '=',\n"," '13',\n"," '<',\n"," '42',\n"," '>',\n"," '=',\n"," '42',\n"," 'index',\n"," 'column',\n"," 'q0=[13,42',\n"," ')',\n"," 'index',\n"," 'column',\n"," 'sorted',\n"," 'q1=[6,27',\n"," ')',\n"," 'q2',\n"," '...',\n"," 'qn',\n"," '<',\n"," '6',\n"," '>',\n"," '=',\n"," '6',\n"," '<',\n"," '13',\n"," '>',\n"," '=',\n"," '13',\n"," '<',\n"," '27',\n"," '>',\n"," '=',\n"," '27',\n"," '<',\n"," '42',\n"," '>',\n"," '=',\n"," '42',\n"," 'index',\n"," 'column',\n"," 'fig',\n"," '.',\n"," '1',\n"," ':',\n"," 'concept',\n"," 'of',\n"," 'database',\n"," 'cracking',\n"," 'reorganizing',\n"," 'for',\n"," 'multiple',\n"," 'queries',\n"," 'and',\n"," 'converging',\n"," 'towards',\n"," 'a',\n"," 'sorted',\n"," 'state',\n"," '.',\n"," 'if',\n"," 'we',\n"," 'inspect',\n"," 'the',\n"," 'literature',\n"," '[',\n"," '4',\n"," ']',\n"," ',',\n"," '[',\n"," '5',\n"," ']',\n"," ',',\n"," '[',\n"," '6',\n"," ']',\n"," ',',\n"," '[',\n"," '7',\n"," ']',\n"," ',',\n"," '[',\n"," '8',\n"," ']',\n"," ',',\n"," '[',\n"," '9',\n"," ']',\n"," ',',\n"," '[',\n"," '10',\n"," ']',\n"," 'proposing',\n"," 'variations',\n"," 'of',\n"," 'the',\n"," 'described',\n"," 'principle',\n"," ',',\n"," 'we',\n"," 'see',\n"," 'that',\n"," 'these',\n"," 'algorithms',\n"," 'mostly',\n"," 'focus',\n"," 'on',\n"," 'reducing',\n"," 'a',\n"," 'single',\n"," 'issue',\n"," 'at',\n"," 'a',\n"," 'time',\n"," '.',\n"," 'for',\n"," 'instance',\n"," ',',\n"," 'hybrid',\n"," 'cracking',\n"," '[',\n"," '5',\n"," ']',\n"," 'tries',\n"," 'to',\n"," 'improve',\n"," 'the',\n"," 'convergence',\n"," 'speed',\n"," 'towards',\n"," 'a',\n"," 'full',\n"," 'index',\n"," '.',\n"," 'stochastic',\n"," 'cracking',\n"," '[',\n"," '4',\n"," ']',\n"," 'instead',\n"," 'focuses',\n"," 'on',\n"," 'improving',\n"," 'the',\n"," 'robustness',\n"," 'on',\n"," 'sequential',\n"," 'query',\n"," 'workloads',\n"," '.',\n"," 'thus',\n"," ',',\n"," 'to',\n"," 'equip',\n"," 'a',\n"," 'system',\n"," 'with',\n"," 'adaptive',\n"," 'indexing',\n"," ',',\n"," 'it',\n"," 'actually',\n"," 'has',\n"," 'to',\n"," 'be',\n"," 'extended',\n"," 'with',\n"," 'numerous',\n"," 'different',\n"," 'implementations',\n"," 'that',\n"," 'must',\n"," 'be',\n"," 'switched',\n"," 'depending',\n"," 'on',\n"," 'the',\n"," 'needs',\n"," 'of',\n"," 'the',\n"," 'user',\n"," 'and',\n"," 'the',\n"," 'current',\n"," 'workload',\n"," '.',\n"," 'this',\n"," 'raises',\n"," 'the',\n"," 'question',\n"," 'of',\n"," 'how',\n"," 'different',\n"," 'these',\n"," 'algorithms',\n"," 'really',\n"," 'are',\n"," '.',\n"," 'during',\n"," 'the',\n"," 'study',\n"," 'of',\n"," 'the',\n"," 'literature',\n"," 'we',\n"," 'made',\n"," 'two',\n"," 'observations',\n"," ':',\n"," 'first',\n"," ',',\n"," 'at',\n"," 'the',\n"," 'heart',\n"," 'of',\n"," 'every',\n"," 'cracking',\n"," 'algorithm',\n"," 'is',\n"," 'simple',\n"," 'data',\n"," 'partitioning',\n"," ',',\n"," 'splitting',\n"," 'a',\n"," 'given',\n"," 'key',\n"," 'range',\n"," 'into',\n"," 'a',\n"," 'certain',\n"," 'number',\n"," 'of',\n"," 'partitions',\n"," '.',\n"," 'second',\n"," ',',\n"," 'the',\n"," 'main',\n"," 'difference',\n"," 'between',\n"," 'the',\n"," 'algorithms',\n"," 'lies',\n"," 'in',\n"," 'how',\n"," 'they',\n"," 'distribute',\n"," 'their',\n"," 'indexing',\n"," 'effort',\n"," 'along',\n"," 'the',\n"," 'query',\n"," 'sequence',\n"," '.',\n"," 'some',\n"," 'methods',\n"," 'tend',\n"," 'to',\n"," 'reorganize',\n"," 'mostly',\n"," 'early',\n"," 'on',\n"," ',',\n"," 'while',\n"," 'others',\n"," 'balance',\n"," 'the',\n"," 'effort',\n"," 'as',\n"," 'much',\n"," 'as',\n"," 'possible',\n"," 'across',\n"," 'the',\n"," 'queries',\n"," '.',\n"," 'based',\n"," 'on',\n"," 'these',\n"," 'observations',\n"," ',',\n"," 'we',\n"," 'will',\n"," 'present',\n"," 'a',\n"," 'generalized',\n"," 'adaptive',\n"," 'indexing',\n"," 'algorithm',\n"," 'that',\n"," 'adapts',\n"," 'itself',\n"," 'to',\n"," 'the',\n"," 'characteris']"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"87gCrn1bm-Oj","colab_type":"code","colab":{}},"source":["# Sentence Score via comparing each word with sentence\n","sentence_scores = {}  \n","for sent in sentence_list:  \n","        for word in sent:\n","            if word.text.lower() in word_frequencies.keys():\n","                if len(sent.text.split(' ')) < 60:\n","                    if sent not in sentence_scores.keys():\n","                        sentence_scores[sent] = word_frequencies[word.text.lower()]\n","                    else:\n","                        sentence_scores[sent] += word_frequencies[word.text.lower()]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_dCG1JkRnIFt","colab_type":"code","outputId":"8716033c-9de1-4ce5-f960-f23a6c33b59a","executionInfo":{"status":"ok","timestamp":1588225569766,"user_tz":-330,"elapsed":1329,"user":{"displayName":"swathi sowmya Bavirthi","photoUrl":"","userId":"11874849727240434816"}},"colab":{"base_uri":"https://localhost:8080/","height":547}},"source":["# Sentence Score Table\n","sentence_scores"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{An overwhelming amount of adaptive indexing algorithms exists today.: 1.28125,\n"," In our recent studies [1], [2], we analyzed 8 papers including 18 different techniques on this type of indexing.: 5.34375,\n"," The reason for the necessity of such a large number of methods is that adaptivity, while offering many nice properties, introduces a surprising amount of unpleasant problems [1], [2] as well.: 6.15625,\n"," For instance, as the investigation of these works showed, adaptive indexing must deal with high variance, slow convergence speed, weak robustness against different query workloads and data distributions, and the trade-off between individual and accumulated query response time.: 7.6875,\n"," In the simplest form of adaptive indexing, called database cracking or standard cracking [3], the index column is repartitioned adaptively with respect to the incoming query predicates.: 5.1875,\n"," If a range query selecting [low, high) comes in, the partition into which low falls is split into two partitions where one partitions contains all keys less than low and the other partition all keys that are greater than or equal to low.: 5.0625,\n"," The same reorganization is repeated for the partition into which high falls.: 1.03125,\n"," After these two steps, the range query can be answered by a simple scan of the qualifying partitions.: 2.375,\n"," The information which key ranges each partition holds is stored in a separate index structure called cracker index.: 1.46875,\n"," The more queries are answered this way, the more fine granular the partitioning becomes.: 2.0,\n"," By this, the query response time incrementally converges towards the one of a traditional index.: 2.34375,\n"," Figure 1 visualizes the concept. ?: 0.90625,\n"," Index Column < 13 >= 13 < 42 >: 1.5,\n"," = 42 Index Column Q0=[13,42): 0.59375,\n"," Index Column sorted Q1=[6,27): 0.34375,\n"," Q2 ...: 0.03125,\n"," Qn < 6 >= 6 < 13 >= 13: 1.5625,\n"," < 27 >=27 < 42 >: 1.1875,\n"," = 42: 0.3125,\n"," Index Column Fig. 1: Concept of database cracking reorganizing for multiple queries and converging towards a sorted state.: 2.3125,\n"," If we inspect the literature [4], [5], [6], [7], [8], [9], [10] proposing variations of the described principle, we see that these algorithms mostly focus on reducing a single issue at a time.: 14.96875,\n"," For instance, hybrid cracking [5] tries to improve the convergence speed towards a full index.: 3.28125,\n"," Stochastic cracking [4] instead focuses on improving the robustness on sequential query workloads.: 2.34375,\n"," Thus, to equip a system with adaptive indexing, it actually has to be extended with numerous different implementations that must be switched depending on the needs of the user and the current workload.: 3.5625,\n"," This raises the question of how different these algorithms really are.: 1.0,\n"," During the study of the literature we made two observations:: 0.21875,\n"," First, at the heart of every cracking algorithm is simple data partitioning, splitting a given key range into a certain number of partitions.: 3.59375,\n"," Second, the main difference between the algorithms lies in how they distribute their indexing effort along the query sequence.: 2.5,\n"," Some methods tend to reorganize mostly early on, while others balance the effort as much as possible across the queries.: 2.0625,\n"," Based on these observations, we will present a generalized adaptive indexing algorithm that adapts itself to the characteris: 1.625}"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"eFsLdvG2oGMl","colab_type":"code","colab":{}},"source":["# Import Heapq. Finding TOP N Sentences with largest scores using heapq\n","from heapq import nlargest"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"fRPnt7BMoJRd","colab_type":"code","outputId":"114f02d6-2982-42ad-b746-6b4c3f10bca9","executionInfo":{"status":"ok","timestamp":1588225816663,"user_tz":-330,"elapsed":1123,"user":{"displayName":"swathi sowmya Bavirthi","photoUrl":"","userId":"11874849727240434816"}},"colab":{"base_uri":"https://localhost:8080/","height":156}},"source":["summarized_sentences = nlargest(7, sentence_scores, key=sentence_scores.get)\n","summarized_sentences"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[If we inspect the literature [4], [5], [6], [7], [8], [9], [10] proposing variations of the described principle, we see that these algorithms mostly focus on reducing a single issue at a time.,\n"," For instance, as the investigation of these works showed, adaptive indexing must deal with high variance, slow convergence speed, weak robustness against different query workloads and data distributions, and the trade-off between individual and accumulated query response time.,\n"," The reason for the necessity of such a large number of methods is that adaptivity, while offering many nice properties, introduces a surprising amount of unpleasant problems [1], [2] as well.,\n"," In our recent studies [1], [2], we analyzed 8 papers including 18 different techniques on this type of indexing.,\n"," In the simplest form of adaptive indexing, called database cracking or standard cracking [3], the index column is repartitioned adaptively with respect to the incoming query predicates.,\n"," If a range query selecting [low, high) comes in, the partition into which low falls is split into two partitions where one partitions contains all keys less than low and the other partition all keys that are greater than or equal to low.,\n"," First, at the heart of every cracking algorithm is simple data partitioning, splitting a given key range into a certain number of partitions.]"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"5BfMhVhuotxH","colab_type":"code","outputId":"8f5b67a1-d9ed-42d2-ab0c-ea457815cacb","executionInfo":{"status":"ok","timestamp":1588225927467,"user_tz":-330,"elapsed":1359,"user":{"displayName":"swathi sowmya Bavirthi","photoUrl":"","userId":"11874849727240434816"}},"colab":{"base_uri":"https://localhost:8080/","height":156}},"source":["# Convert Sentences from Spacy Span to Strings for joining entire sentence\n","for w in summarized_sentences:\n","    print(w.text)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["If we inspect the literature [4], [5], [6], [7], [8], [9], [10] proposing variations of the described principle, we see that these algorithms mostly focus on reducing a single issue at a time.\n","For instance, as the investigation of these works showed, adaptive indexing must deal with high variance, slow convergence speed, weak robustness against different query workloads and data distributions, and the trade-off between individual and accumulated query response time.\n","The reason for the necessity of such a large number of methods is that adaptivity, while offering many nice properties, introduces a surprising amount of unpleasant problems [1], [2] as well.\n","In our recent studies [1], [2], we analyzed 8 papers including 18 different techniques on this type of indexing.\n","In the simplest form of adaptive indexing, called database cracking or standard cracking [3], the index column is repartitioned adaptively with respect to the incoming query predicates.\n","If a range query selecting [low, high) comes in, the partition into which low falls is split into two partitions where one partitions contains all keys less than low and the other partition all keys that are greater than or equal to low.\n","First, at the heart of every cracking algorithm is simple data partitioning, splitting a given key range into a certain number of partitions.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rRnaG6l0pJzr","colab_type":"code","colab":{}},"source":["# List Comprehension of Sentences Converted From Spacy.span to strings\n","final_sentences = [ w.text for w in summarized_sentences ]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qd1bfqvjpggs","colab_type":"code","outputId":"039ececf-d6fd-4e2d-b24a-38eb234538af","executionInfo":{"status":"ok","timestamp":1588226038954,"user_tz":-330,"elapsed":1329,"user":{"displayName":"swathi sowmya Bavirthi","photoUrl":"","userId":"11874849727240434816"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["summary = ' '.join(final_sentences)\n","summary"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'If we inspect the literature [4], [5], [6], [7], [8], [9], [10] proposing variations of the described principle, we see that these algorithms mostly focus on reducing a single issue at a time. For instance, as the investigation of these works showed, adaptive indexing must deal with high variance, slow convergence speed, weak robustness against different query workloads and data distributions, and the trade-off between individual and accumulated query response time. The reason for the necessity of such a large number of methods is that adaptivity, while offering many nice properties, introduces a surprising amount of unpleasant problems [1], [2] as well. In our recent studies [1], [2], we analyzed 8 papers including 18 different techniques on this type of indexing. In the simplest form of adaptive indexing, called database cracking or standard cracking [3], the index column is repartitioned adaptively with respect to the incoming query predicates. If a range query selecting [low, high) comes in, the partition into which low falls is split into two partitions where one partitions contains all keys less than low and the other partition all keys that are greater than or equal to low. First, at the heart of every cracking algorithm is simple data partitioning, splitting a given key range into a certain number of partitions.'"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"e2TrMKqMqCXg","colab_type":"code","outputId":"a916ad44-63ac-4bb0-86a4-714a00a94639","executionInfo":{"status":"ok","timestamp":1588226221468,"user_tz":-330,"elapsed":1295,"user":{"displayName":"swathi sowmya Bavirthi","photoUrl":"","userId":"11874849727240434816"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Length of Summary\n","len(summary)\n"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1341"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"AhHy162XqPnh","colab_type":"code","outputId":"615997bd-ca7b-44ea-aec6-725b0932ac7a","executionInfo":{"status":"ok","timestamp":1588226231830,"user_tz":-330,"elapsed":1116,"user":{"displayName":"swathi sowmya Bavirthi","photoUrl":"","userId":"11874849727240434816"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len(document1)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3090"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"id":"Yimmymz9qyAr","colab_type":"code","outputId":"f302c23b-d1c0-40ca-a47a-af9d031a4c42","executionInfo":{"status":"ok","timestamp":1588226373723,"user_tz":-330,"elapsed":1342,"user":{"displayName":"swathi sowmya Bavirthi","photoUrl":"","userId":"11874849727240434816"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["docx1 = nlp(document1)\n","mytokens = [ token.text for token in docx1 ]\n","len(mytokens)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["595"]},"metadata":{"tags":[]},"execution_count":26}]}]}